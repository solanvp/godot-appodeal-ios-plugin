#!/usr/bin/env python
import os
import sys
import subprocess

if sys.version_info < (3,):
    def decode_utf8(x):
        return x
else:
    import codecs
    def decode_utf8(x):
        return codecs.utf_8_decode(x)[0]

# Most of the settings are taken from https://github.com/BastiaanOlij/gdnative_cpp_example

opts = Variables([], ARGUMENTS)

# Gets the standard flags CC, CCX, etc.
env = DefaultEnvironment()

# Define our options
opts.Add(EnumVariable('target', "Compilation target", 'debug', ['debug', 'release', "release_debug"]))
opts.Add(EnumVariable('arch', "Compilation Architecture", '', ['', 'arm64', 'armv7', 'x86_64']))
opts.Add(BoolVariable('simulator', "Compilation platform", 'no'))
opts.Add(BoolVariable('use_llvm', "Use the LLVM / Clang compiler", 'no'))
opts.Add(PathVariable('target_path', 'The path where the lib is installed.', 'bin/'))
opts.Add(EnumVariable('plugin', 'Plugin to build', '', ['', 'appodealplugin']))
opts.Add(EnumVariable('version', 'Godot version to target', '4.0', ['4.0'])) # Removed 3.x option, set default to 4.0

# Corrected: AddOption is now called directly, not through opts.Add
AddOption('--appodeal-xcframework-path', help='Path to the Appodeal.xcframework folder', default='')


# Updates the environment with the option variables.
opts.Update(env)

# Force use_llvm to True if on macOS, as Clang is the standard for iOS development
if sys.platform == 'darwin':
    env['use_llvm'] = True

# Process some arguments
if env['use_llvm']:
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'

if env['arch'] == '':
    print("No valid arch selected.")
    quit();

if env['plugin'] == '':
    print("No valid plugin selected.")
    quit();

# For the reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# Enable Obj-C modules
env.Append(CCFLAGS=["-fmodules", "-fcxx-modules"])

if env['simulator']:
    sdk_name = 'iphonesimulator'
    env.Append(CCFLAGS=['-mios-simulator-version-min=10.0'])
    env.Append(LINKFLAGS=["-mios-simulator-version-min=10.0"])
else:
    sdk_name = 'iphoneos'
    env.Append(CCFLAGS=['-miphoneos-version-min=10.0'])
    env.Append(LINKFLAGS=["-miphoneos-version-min=10.0"])

try:
    sdk_path = decode_utf8(subprocess.check_output(['xcrun', '--sdk', sdk_name, '--show-sdk-path']).strip())
except (subprocess.CalledProcessError, OSError):
    raise ValueError("Failed to find SDK path while running xcrun --sdk {} --show-sdk-path.".format(sdk_name))

env.Append(CCFLAGS=[
    '-fobjc-arc',
    '-fmessage-length=0', '-fno-strict-aliasing', '-fdiagnostics-print-source-range-info',
    '-fdiagnostics-show-category=id', '-fdiagnostics-parseable-fixits', '-fpascal-strings',
    '-fblocks', '-fvisibility=hidden', '-MMD', '-MT', 'dependencies', '-fno-exceptions',
    '-Wno-ambiguous-macro',
    '-Wall', '-Werror=return-type',
    # '-Wextra',
])

# Corrected line: Removed "$IOS_SDK_PATH" and kept only the 'sdk_path' variable
env.Append(CCFLAGS=['-arch', env['arch'], "-isysroot", sdk_path, "-stdlib=libc++"])
env.Append(CCFLAGS=['-DPTRCALL_ENABLED'])
env.Prepend(CXXFLAGS=[
    '-DNEED_LONG_INT', '-DLIBYUV_DISABLE_NEON',
    '-DIOS_ENABLED', '-DUNIX_ENABLED', '-DCOREAUDIO_ENABLED'
])
env.Append(LINKFLAGS=["-arch", env['arch'], '-isysroot', sdk_path, '-F' + sdk_path])

if env['arch'] == 'armv7':
    env.Prepend(CXXFLAGS=['-fno-aligned-allocation'])

# Godot 4.0 specific flags
env.Prepend(CXXFLAGS=['-DIOS_ENABLED'])
env.Prepend(CXXFLAGS=['-DVERSION_4_0'])

env.Append(CCFLAGS=['-std=gnu++17']) # Moved to CCFLAGS for broader application
env.Prepend(CXXFLAGS=['-DVULKAN_ENABLED']) # Keep other CXXFLAGS
env.Append(CCFLAGS=['-x', 'objective-c++']) # Explicitly tell clang to treat .m files as Objective-C++

if env['target'] == 'debug':
    env.Prepend(CXXFLAGS=[
        '-gdwarf-2', '-O0',
        '-DDEBUG_MEMORY_ALLOC', '-DDISABLE_FORCED_INLINE',
        '-D_DEBUG', '-DDEBUG=1', '-DDEBUG_ENABLED',
    ])
elif env['target'] == 'release_debug':
    env.Prepend(CXXFLAGS=[
        '-O2', '-ftree-vectorize',
        '-DNDEBUG', '-DNS_BLOCK_ASSERTIONS=1', '-DDEBUG_ENABLED',
    ])

    if env['arch'] != 'armv7':
        env.Prepend(CXXFLAGS=['-fomit-frame-pointer'])
else: # release
    env.Prepend(CXXFLAGS=[
        '-O2', '-ftree-vectorize',
        '-DNDEBUG', '-DNS_BLOCK_ASSERTIONS=1',
    ])

    if env['arch'] != 'armv7':
        env.Prepend(CXXFLAGS=['-fomit-frame-pointer'])

# Adding header files for Godot's core (Godot 4.0 specific)
env.Append(CPPPATH=[
    '.',
    'godot', # Assuming godot source is here
    'godot/platform/ios',
    os.path.join(sdk_path, 'usr', 'include'), # General system headers
    os.path.join(sdk_path, 'usr', 'include', 'c++', 'v1') # libc++ specific headers
])

# --- START OF LOCAL APPODEAL SDK INTEGRATION ---
# Retrieve the value of the option
appodeal_xcframework_path = env.GetOption('appodeal_xcframework_path')

# Check if appodeal_xcframework_path is provided and exists before using it
if appodeal_xcframework_path:
    appodeal_xcframework_root = appodeal_xcframework_path
    
    # Determine platform-specific framework path within xcframework
    platform_subdir = ""
    if env['simulator']:
        if env['arch'] == 'x86_64':
            platform_subdir = "ios-x86_64-simulator"
        elif env['arch'] == 'arm64':
            platform_subdir = "ios-arm64-simulator"
        else:
            print(f"Error: Unsupported simulator architecture for Appodeal XCFramework: {env['arch']}")
            quit()
    else: # Device build
        platform_subdir = f"ios-{env['arch']}"

    appodeal_framework_path = os.path.join(appodeal_xcframework_root, platform_subdir, "Appodeal.framework")
    
    # Add the *parent directory* of Appodeal.framework to LINKFLAGS (-F)
    appodeal_framework_search_path = os.path.dirname(appodeal_framework_path)
    if os.path.exists(appodeal_framework_search_path):
        env.Append(LINKFLAGS=[f"-F{appodeal_framework_search_path}"])
        env.Append(CCFLAGS=[f"-F{appodeal_framework_search_path}"])
        print(f"Added Appodeal Framework search path (-F): {appodeal_framework_search_path}")
        
        # Add the Headers directory to the include path
        appodeal_headers_path = os.path.join(appodeal_framework_path, "Headers")
        if os.path.exists(appodeal_headers_path):
            env.Append(CPPPATH=[appodeal_headers_path])
            print(f"Added Appodeal Headers path: {appodeal_headers_path}")
        else:
            print(f"Warning: Appodeal Headers path not found: {appodeal_headers_path}")
    else:
        print(f"Error: Appodeal Framework search path not found: {appodeal_framework_search_path}. Check your '--appodeal-xcframework-path' and 'arch'/'simulator' settings.")
        quit()

    # Add the framework itself to LINKFLAGS (-framework)
    env.Append(LINKFLAGS=["-framework", "Appodeal"])
    print("Added -framework Appodeal")

    # You might also need to link against other system frameworks that Appodeal depends on.
    # Common ones include:
    env.Append(LINKFLAGS=[
        "-framework", "AdSupport",
        "-framework", "CoreGraphics",
        "-framework", "CoreTelephony",
        "-framework", "CoreMotion",
        "-framework", "Foundation",
        "-framework", "UIKit",
        "-framework", "WebKit",
        "-framework", "StoreKit",
        "-framework", "SystemConfiguration",
        "-framework", "AVFoundation",
        "-framework", "AudioToolbox",
        "-framework", "CoreMedia",
        "-framework", "CoreLocation",
        "-framework", "SafariServices",
        "-framework", "MessageUI",
        "-framework", "MobileCoreServices", # Deprecated in newer iOS, but might be needed for older SDKs
        "-framework", "ImageIO",
        "-framework", "QuartzCore",
        "-framework", "Security",
        "-framework", "JavaScriptCore",
        "-framework", "EventKit",
        "-framework", "EventKitUI",
        "-framework", "GameKit",
        "-framework", "iAd", # Deprecated, but some older SDKs might still reference
        "-framework", "MediaPlayer", # Deprecated
        "-framework", "UserNotifications",
        "-framework", "AppTrackingTransparency", # Crucial for iOS 14+
        "-lsqlite3", # Often a dependency for SDKs
        "-lc++", # Ensure C++ standard library is linked
        "-lz", # Zlib compression library
        "-ObjC", # Crucial for Objective-C categories to be linked
    ])
    print("Added common Appodeal system framework dependencies.")

else:
    print("No '--appodeal-xcframework-path' provided. Skipping local Appodeal SDK integration.")

# --- END OF LOCAL APPODEAL SDK INTEGRATION ---


# tweak this if you want to use different folders, or more folders, to store your source code in.
sources = Glob(env['plugin'] + '/*.cpp')
sources.append(Glob(env['plugin'] + '/*.mm'))
sources.append(Glob(env['plugin'] + '/*.m'))

# lib<plugin>.<arch>-<simulator|ios>.<release|debug|release_debug>.a
library_platform = env["arch"] + "-" + ("simulator" if env["simulator"] else "iphone") # Changed from "ios" to "iphone" for consistency with Godot's export templates
library_name = env['plugin'] + "." + library_platform + "." + env["target"] + ".a"
library = env.StaticLibrary(target=env['target_path'] + library_name, source=sources)

Default(library)

# Generates help for the -h scons option.
Help(opts.GenerateHelpText(env))
