#!/usr/bin/env python
import os
import sys
import subprocess

if sys.version_info < (3,):
    def decode_utf8(x):
        return x
else:
    import codecs
    def decode_utf8(x):
        return codecs.utf_8_decode(x)[0]

# Most of the settings are taken from https://github.com/BastiaanOlij/gdnative_cpp_example

opts = Variables([], ARGUMENTS)

# Gets the standard flags CC, CCX, etc.
env = DefaultEnvironment()

# Define our options
opts.Add(EnumVariable('target', "Compilation target", 'debug', ['debug', 'release', "release_debug"]))
opts.Add(EnumVariable('arch', "Compilation Architecture", '', ['', 'arm64', 'armv7', 'x86_64']))
opts.Add(BoolVariable('simulator', "Compilation platform", 'no'))
opts.Add(BoolVariable('use_llvm', "Use the LLVM / Clang compiler", 'no'))
opts.Add(PathVariable('target_path', 'The path where the lib is installed.', 'bin/'))
opts.Add(EnumVariable('plugin', 'Plugin to build', '', ['', 'appodealplugin']))
opts.Add(EnumVariable('version', 'Godot version to target', '', ['', '3.x', '4.0']))

# Updates the environment with the option variables.
opts.Update(env)

# Force use_llvm to True if on macOS, as Clang is the standard for iOS development
if sys.platform == 'darwin':
    env['use_llvm'] = True

# Process some arguments
if env['use_llvm']:
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'

if env['arch'] == '':
    print("No valid arch selected.")
    quit();

if env['plugin'] == '':
    print("No valid plugin selected.")
    quit();

if env['version'] == '':
    print("No valid Godot version selected.")
    quit();

# For the reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# Enable Obj-C modules
env.Append(CCFLAGS=["-fmodules", "-fcxx-modules"])

if env['simulator']:
    sdk_name = 'iphonesimulator'
    env.Append(CCFLAGS=['-mios-simulator-version-min=10.0'])
    env.Append(LINKFLAGS=["-mios-simulator-version-min=10.0"])
else:
    sdk_name = 'iphoneos'
    env.Append(CCFLAGS=['-miphoneos-version-min=10.0'])
    env.Append(LINKFLAGS=["-miphoneos-version-min=10.0"])

try:
    sdk_path = decode_utf8(subprocess.check_output(['xcrun', '--sdk', sdk_name, '--show-sdk-path']).strip())
except (subprocess.CalledProcessError, OSError):
    raise ValueError("Failed to find SDK path while running xcrun --sdk {} --show-sdk-path.".format(sdk_name))

env.Append(CCFLAGS=[
    '-fobjc-arc',
    '-fmessage-length=0', '-fno-strict-aliasing', '-fdiagnostics-print-source-range-info',
    '-fdiagnostics-show-category=id', '-fdiagnostics-parseable-fixits', '-fpascal-strings',
    '-fblocks', '-fvisibility=hidden', '-MMD', '-MT', 'dependencies', '-fno-exceptions',
    '-Wno-ambiguous-macro',
    '-Wall', '-Werror=return-type',
    # '-Wextra',
])

# Corrected line: Removed "$IOS_SDK_PATH" and kept only the 'sdk_path' variable
env.Append(CCFLAGS=['-arch', env['arch'], "-isysroot", sdk_path, "-stdlib=libc++"])
env.Append(CCFLAGS=['-DPTRCALL_ENABLED'])
env.Prepend(CXXFLAGS=[
    '-DNEED_LONG_INT', '-DLIBYUV_DISABLE_NEON',
    '-DIOS_ENABLED', '-DUNIX_ENABLED', '-DCOREAUDIO_ENABLED'
])
env.Append(LINKFLAGS=["-arch", env['arch'], '-isysroot', sdk_path, '-F' + sdk_path])

if env['arch'] == 'armv7':
    env.Prepend(CXXFLAGS=['-fno-aligned-allocation'])

if env['version'] == '3.x':
    # Removed "$IPHONESDK" as it's not defined and likely redundant with -isysroot
    env.Prepend(CXXFLAGS=['-DIPHONE_ENABLED'])
    env.Prepend(CXXFLAGS=['-DVERSION_3_X'])

    env.Prepend(CFLAGS=['-std=gnu11']) # Keep for Godot 3.x if it's pure C
    env.Prepend(CXXFLAGS=['-DGLES_ENABLED', '-std=gnu++14'])

    if env['target'] == 'debug':
        env.Prepend(CXXFLAGS=[
            '-gdwarf-2', '-O0',
            '-DDEBUG_MEMORY_ALLOC', '-DDISABLE_FORCED_INLINE',
            '-D_DEBUG', '-DDEBUG=1', '-DDEBUG_ENABLED',
            '-DPTRCALL_ENABLED',
        ])
    elif env['target'] == 'release_debug':
        env.Prepend(CXXFLAGS=['-O2', '-ftree-vectorize',
            '-DNDEBUG', '-DNS_BLOCK_ASSERTIONS=1', '-DDEBUG_ENABLED',
            '-DPTRCALL_ENABLED',
        ])

        if env['arch'] != 'armv7':
            env.Prepend(CXXFLAGS=['-fomit-frame-pointer'])
    else:
        env.Prepend(CXXFLAGS=[
            '-O2', '-ftree-vectorize',
            '-DNDEBUG', '-DNS_BLOCK_ASSERTIONS=1',
            '-DPTRCALL_ENABLED',
        ])

        if env['arch'] != 'armv7':
            env.Prepend(CXXFLAGS=['-fomit-frame-pointer'])
elif env['version'] == '4.0':
    # Removed "$IOS_SDK_PATH" as it's not defined and likely redundant with -isysroot
    env.Prepend(CXXFLAGS=['-DIOS_ENABLED'])
    env.Prepend(CXXFLAGS=['-DVERSION_4_0'])

    # Removed: env.Prepend(CFLAGS=['-std=gnu11']) to avoid conflict with Objective-C++
    # Key Change: Moved -std=gnu++17 from CXXFLAGS to CCFLAGS for broader application
    env.Append(CCFLAGS=['-std=gnu++17'])
    env.Prepend(CXXFLAGS=['-DVULKAN_ENABLED']) # Keep other CXXFLAGS
    # Key Change: Explicitly tell clang to treat .m files as Objective-C++
    env.Append(CCFLAGS=['-x', 'objective-c++'])

    if env['target'] == 'debug':
        env.Prepend(CXXFLAGS=[
            '-gdwarf-2', '-O0',
            '-DDEBUG_MEMORY_ALLOC', '-DDISABLE_FORCED_INLINE',
            '-D_DEBUG', '-DDEBUG=1', '-DDEBUG_ENABLED',
        ])
    elif env['target'] == 'release_debug':
        env.Prepend(CXXFLAGS=[
            '-O2', '-ftree-vectorize',
            '-DNDEBUG', '-DNS_BLOCK_ASSERTIONS=1', '-DDEBUG_ENABLED',
        ])

        if env['arch'] != 'armv7':
            env.Prepend(CXXFLAGS=['-fomit-frame-pointer'])
    else:
        env.Prepend(CXXFLAGS=[
            '-O2', '-ftree-vectorize',
            '-DNDEBUG', '-DNS_BLOCK_ASSERTIONS=1',
        ])

        if env['arch'] != 'armv7':
            env.Prepend(CXXFLAGS=['-fomit-frame-pointer'])
else:
    print("No valid version to set flags for.")
    quit();

# Adding header files
if env['version'] == '3.x':
    env.Append(CPPPATH=[
        '.',
        'godot',
        'godot/platform/iphone',
    ])
else: # version == '4.0'
       env.Append(CPPPATH=[
        '.',
        'godot',
        'godot/platform/ios',
        os.path.join(sdk_path, 'usr', 'include'), # General system headers
        os.path.join(sdk_path, 'usr', 'include', 'c++', 'v1') # libc++ specific headers
    ])

# tweak this if you want to use different folders, or more folders, to store your source code in.
sources = Glob('appodealplugin/*.cpp')
sources.append(Glob('appodealplugin/*.mm'))
sources.append(Glob('appodealplugin/*.m'))

library_platform = env["arch"] + "-" + ("simulator" if env["simulator"] else "iphone")
library_name = env['plugin'] + "." + library_platform + "." + env["target"] + ".a"
library = env.StaticLibrary(target=env['target_path'] + library_name, source=sources)


Default(library)

# Generates help for the -h scons option.
Help(opts.GenerateHelpText(env))
